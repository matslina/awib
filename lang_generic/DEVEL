## About

Typically, an awib  programming language backend will operate according to
the following algorithm:

 | output(header)
 | for each byte code instruction P with argument Q:
 |     output(code_P)
 |     if P is ADD, SUB, LEFT or RIGHT:
 |         output(base10(Q))
 |         output(post_P)
 | output(footer)

The backend's output will begin with some header and end with some footer. In
between is a series of one-to-one translations of awib bytecode instructions.
Some of the instructions require the 1 byte argument Q being output in base 10
followed by some terminating string post_P.

Obviously, given the proper framework, the task of implementing a particular
language backend could be reduced to defining a header, a footer and the code_P
and post_P strings. The lang_generic backend provides such a framework.


## Language definition

A language definition is simply a piece of brainfuck code capable of printing
each of the constant code blocks. When run, it is passed an integer S that
indicates which code block to output. Table 1 lists the values of S and what
outputs they trigger.

The language definition is also passed a 16 bit integer Dd = D*256+d that
indicates the current loop depth. Dd is intended to allow code indentation.

The precondition for a language definition is:
% (stuff) *D d 7(0) S (stuff)

Postcondition is:
% (stuff) *0 9(0) (stuff)

 +-----+--------------+
 |  S  | Output       |
 +-----+--------------+
 |  1  | code_ADD     |
 +-----+--------------+
 |  2  | code_INPUT   |
 +-----+--------------+
 |  3  | code_SUB     |
 +-----+--------------+
 |  4  | code_OUTPUT  |
 +-----+--------------+
 |  5  | code_LEFT    |
 +-----+--------------+
 |  6  | code_RIGHT   |
 +-----+--------------+
 |  7  | code_OPEN    |
 +-----+--------------+
 |  8  | code_CLOSE   |
 +-----+--------------+
 |  9  | code_SET     |
 +-----+--------------+
 | 10  | code_LMUL1   |
 +-----+--------------+
 | 11  | code_LMUL2   |
 +-----+--------------+
 | 12  | code_RMUL1   |
 +-----+--------------+
 | 13  | code_RMUL2   |
 +-----+--------------+
 | 21  | post_ADD     |
 +-----+--------------+
 | 23  | post_SUB     |
 +-----+--------------+
 | 25  | post_LEFT    |
 +-----+--------------+
 | 26  | post_RIGHT   |
 +-----+--------------+
 | 29  | post_SET     |
 +-----+--------------+
 | 31  | post_LMUL2   |
 +-----+--------------+
 | 33  | post_RMUL2   |
 +-----+--------------+
 | 36  | header       |
 +-----+--------------+
 | 37  | footer       |
 +-----+--------------+
   Table 1


## Implemented languages

### Go  (http://www.golang.org/)

 +--------------+------------------------------------------------------------+
 | Code block   | Output                                                     |
 +--------------+------------------------------------------------------------+
 | code_ADD     | m[p]+=                                                     |
 +--------------+------------------------------------------------------------+
 | code_INPUT   | os.Stdin.Read(m[p:p+1])                                    |
 +--------------+------------------------------------------------------------+
 | code_SUB     | m[p]-=                                                     |
 +--------------+------------------------------------------------------------+
 | code_OUTPUT  | os.Stdout.Write(m[p:p+1])                                  |
 +--------------+------------------------------------------------------------+
 | code_LEFT    | p-=                                                        |
 +--------------+------------------------------------------------------------+
 | code_RIGHT   | p+=                                                        |
 +--------------+------------------------------------------------------------+
 | code_OPEN    | for m[p]!=0{                                               |
 +--------------+------------------------------------------------------------+
 | code_CLOSE   | }                                                          |
 +--------------+------------------------------------------------------------+
 | code_SET     | m[p]=                                                      |
 +--------------+------------------------------------------------------------+
 | code_LMUL1   | m[p-                                                       |
 +--------------+------------------------------------------------------------+
 | code_LMUL2   | ]+=m[p]*                                                   |
 +--------------+------------------------------------------------------------+
 | code_RMUL1   | m[p+                                                       |
 +--------------+------------------------------------------------------------+
 | code_RMUL2   | ]+=m[p]*                                                   |
 +--------------+------------------------------------------------------------+
 | post_ADD     |                                                            |
 +--------------+------------------------------------------------------------+
 | post_SUB     |                                                            |
 +--------------+------------------------------------------------------------+
 | post_LEFT    |                                                            |
 +--------------+------------------------------------------------------------+
 | post_RIGHT   |                                                            |
 +--------------+------------------------------------------------------------+
 | post_SET     |                                                            |
 +--------------+------------------------------------------------------------+
 | post_LMUL2   |                                                            |
 +--------------+------------------------------------------------------------+
 | post_RMUL2   |                                                            |
 +--------------+------------------------------------------------------------+
 | header       | package main                                               |
 |              | import "os"                                                |
 |              | func run(in *os.File, out *os.File){                       |
 |              |   var m[0x10100]byte                                       |
 |              |   p:=127                                                   |
 |              |   m[p]=0                                                   |
 +--------------+------------------------------------------------------------+
 | footer       | }                                                          |
 |              | func main(){                                               |
 |              |   run(os.Stdin, os.Stdout)                                 |
 |              | }                                                          |
 +--------------+------------------------------------------------------------+
   Table 3 - Language definition for Go

### Ruby

 +--------------+------------------------------------------------------------+
 | Code block   | Output                                                     |
 +--------------+------------------------------------------------------------+
 | code_ADD     | m[p]=(m[p]+                                                |
 +--------------+------------------------------------------------------------+
 | code_INPUT   | c=in_.getbyte();m[p]=c unless c==nil                       |
 +--------------+------------------------------------------------------------+
 | code_SUB     | m[p]=(m[p]-                                                |
 +--------------+------------------------------------------------------------+
 | code_OUTPUT  | out.write(m[p].chr)                                        |
 +--------------+------------------------------------------------------------+
 | code_LEFT    | p-=                                                        |
 +--------------+------------------------------------------------------------+
 | code_RIGHT   | p+=                                                        |
 +--------------+------------------------------------------------------------+
 | code_OPEN    | while m[p]!=0                                              |
 +--------------+------------------------------------------------------------+
 | code_CLOSE   | end                                                        |
 +--------------+------------------------------------------------------------+
 | code_SET     | m[p]=                                                      |
 +--------------+------------------------------------------------------------+
 | code_LMUL1   | o=p-                                                       |
 +--------------+------------------------------------------------------------+
 | code_LMUL2   | ;m[o]=(m[o]+m[p]*                                          |
 +--------------+------------------------------------------------------------+
 | code_RMUL1   | o=p+                                                       |
 +--------------+------------------------------------------------------------+
 | code_RMUL2   | ;m[o]=(m[o]+m[p]*                                          |
 +--------------+------------------------------------------------------------+
 | post_ADD     | )%0x100                                                    |
 +--------------+------------------------------------------------------------+
 | post_SUB     | )%0x100                                                    |
 +--------------+------------------------------------------------------------+
 | post_LEFT    |                                                            |
 +--------------+------------------------------------------------------------+
 | post_RIGHT   |                                                            |
 +--------------+------------------------------------------------------------+
 | post_SET     |                                                            |
 +--------------+------------------------------------------------------------+
 | post_LMUL2   | )%0x100                                                    |
 +--------------+------------------------------------------------------------+
 | post_RMUL2   | )%0x100                                                    |
 +--------------+------------------------------------------------------------+
 | header       | #!/usr/bin/env ruby                                        |
 |              | def run(in_, out)                                          |
 |              |     m=[0]*0x10100;p=127;                                   |
 |              |     out.binmode                                            |
 +--------------+------------------------------------------------------------+
 | footer       | end                                                        |
 |              | run(STDIN, STDOUT)                                         |
 +--------------+------------------------------------------------------------+
   Table 4 - Language definition for Ruby

### Tcl

 +--------------+------------------------------------------------------------+
 | Code block   | Output                                                     |
 +--------------+------------------------------------------------------------+
 | code_ADD     | lset mem $p [expr ([lindex $mem $p] +                      |
 +--------------+------------------------------------------------------------+
 | code_INPUT   | set c [read $in 1];                                        |
 |              | if {[string length $c]==1} {lset mem $p [scan $c %c]}      |
 +--------------+------------------------------------------------------------+
 | code_SUB     | lset mem $p [expr ([lindex $mem $p] -                      |
 +--------------+------------------------------------------------------------+
 | code_OUTPUT  | puts -nonewline $out [format %c [lindex $mem $p]]          |
 +--------------+------------------------------------------------------------+
 | code_LEFT    | set p [expr $p-                                            |
 +--------------+------------------------------------------------------------+
 | code_RIGHT   | set p [expr $p+                                            |
 +--------------+------------------------------------------------------------+
 | code_OPEN    | while {[lindex $mem $p] != 0} {                            |
 +--------------+------------------------------------------------------------+
 | code_CLOSE   | }                                                          |
 +--------------+------------------------------------------------------------+
 | code_SET     | lset mem $p                                                |
 +--------------+------------------------------------------------------------+
 | code_LMUL1   | set o [expr $p-                                            |
 +--------------+------------------------------------------------------------+
 | code_LMUL2   | ];lset mem $o [expr ([lindex $mem $o] + [lindex $mem $p] * |
 +--------------+------------------------------------------------------------+
 | code_RMUL1   | set o [expr $p+                                            |
 +--------------+------------------------------------------------------------+
 | code_RMUL2   | ];lset mem $o [expr ([lindex $mem $o] + [lindex $mem $p] * |
 +--------------+------------------------------------------------------------+
 | post_ADD     | ) % 256]                                                   |
 +--------------+------------------------------------------------------------+
 | post_SUB     | ) % 256]                                                   |
 +--------------+------------------------------------------------------------+
 | post_LEFT    | ]                                                          |
 +--------------+------------------------------------------------------------+
 | post_RIGHT   | ]                                                          |
 +--------------+------------------------------------------------------------+
 | post_SET     |                                                            |
 +--------------+------------------------------------------------------------+
 | post_LMUL2   | ) % 256]                                                   |
 +--------------+------------------------------------------------------------+
 | post_RMUL2   | ) % 256]                                                   |
 +--------------+------------------------------------------------------------+
 | header       | #!/usr/bin/tclsh                                           |
 |              | fconfigure stdout -encoding binary                         |
 |              | fconfigure stdin -encoding binary                          |
 |              | proc run {in out} {                                        |
 |              |     set p 127                                              |
 |              |     set mem {0}                                            |
 |              |     for {set i 0} {$i<0x10100} {incr i} {lappend mem 0}    |
 +--------------+------------------------------------------------------------+
 | footer       |     return 0                                               |
 |              | }                                                          |
 |              | run stdin stdout                                           |
 +--------------+------------------------------------------------------------+
   Table 5 - Language definition for Tcl

### Rust

 +--------------+------------------------------------------------------------+
 | Code block   | Output                                                     |
 +--------------+------------------------------------------------------------+
 | code_ADD     | buf[p] = buf[p].wrapping_add(                              |
 +--------------+------------------------------------------------------------+
 | code_INPUT   | i.read(&mut buf[p..p+1])?;                                 |
 +--------------+------------------------------------------------------------+
 | code_SUB     | buf[p] = buf[p].wrapping_sub(                              |
 +--------------+------------------------------------------------------------+
 | code_OUTPUT  | o.write(&buf[p..p+1])?;                                    |
 +--------------+------------------------------------------------------------+
 | code_LEFT    | p -=                                                       |
 +--------------+------------------------------------------------------------+
 | code_RIGHT   | p +=                                                       |
 +--------------+------------------------------------------------------------+
 | code_OPEN    | while buf[p] != 0 {                                        |
 +--------------+------------------------------------------------------------+
 | code_CLOSE   | }                                                          |
 +--------------+------------------------------------------------------------+
 | code_SET     | buf[p] =                                                   |
 +--------------+------------------------------------------------------------+
 | code_LMUL1   | let t = p -                                                |
 +--------------+------------------------------------------------------------+
 | code_LMUL2   | ; buf[t] = buf[t].wrapping_add(buf[p].wrapping_mul(        |
 +--------------+------------------------------------------------------------+
 | code_RMUL1   | let t = p +                                                |
 +--------------+------------------------------------------------------------+
 | code_RMUL2   | ; buf[t] = buf[t].wrapping_add(buf[p].wrapping_mul(        |
 +--------------+------------------------------------------------------------+
 | post_ADD     | );                                                         |
 +--------------+------------------------------------------------------------+
 | post_SUB     | );                                                         |
 +--------------+------------------------------------------------------------+
 | post_LEFT    | ;                                                          |
 +--------------+------------------------------------------------------------+
 | post_RIGHT   | ;                                                          |
 +--------------+------------------------------------------------------------+
 | post_SET     | ;                                                          |
 +--------------+------------------------------------------------------------+
 | post_LMUL2   | ));                                                        |
 +--------------+------------------------------------------------------------+
 | post_RMUL2   | ));                                                        |
 +--------------+------------------------------------------------------------+
 | header       | use std::io::{self, Read, Write};                          |
 |              |                                                            |
 |              | #[allow(unused_variables)]                                 |
 |              | #[allow(unused_mut)]                                       |
 |              | fn run<R, W>(mut i: R, mut o: W) -> io::Result<()>         |
 |              | where                                                      |
 |              |     R: Read,                                               |
 |              |     W: Write,                                              |
 |              | {                                                          |
 |              |     let mut p = 127;                                       |
 |              |     let mut buf = [0u8; 0x10100];                          |
 +--------------+------------------------------------------------------------+
 | footer       |     Ok(())                                                 |
 |              | }                                                          |
 |              |                                                            |
 |              | fn main() -> io::Result<()> {                              |
 |              |     return run(std::io::stdin(), std::io::stdout());       |
 |              | }                                                          |
 +--------------+------------------------------------------------------------+
   Table 5 - Language definition for Rust
